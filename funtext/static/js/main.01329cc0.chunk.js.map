{"version":3,"sources":["numberForm.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","NumberForm","props","state","input","handleChange","bind","handleSubmit","event","this","setState","target","value","length","alert","preventDefault","num","post","number","then","response","console","log","catch","error","onSubmit","type","placeholder","onChange","React","Component","App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSACMA,EAAQC,EAAQ,IAgDPC,E,YA7Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANH,E,0EASNE,GACXC,KAAKC,SAAS,CACZN,MAAOI,EAAMG,OAAOC,U,mCAIXJ,GAGX,GAAGC,KAAKN,MAAMC,MAAMS,OAAS,IAAMJ,KAAKN,MAAMC,MAAMS,OAAS,GAG3D,OAFAC,MAAM,sDACNN,EAAMO,iBAGR,IAAIC,EAAM,KAAOP,KAAKN,MAAMC,MAC5BL,EAAMkB,KAAK,qCAAsC,CAC/CC,OAAQF,IAETG,MAAK,SAAUC,GACdC,QAAQC,IAAIF,MAEbG,OAAM,SAAUC,GACfH,QAAQC,IAAIE,MAEdhB,EAAMO,mB,+BAIN,OACE,0BAAMU,SAAUhB,KAAKF,cACjB,2BAAOmB,KAAK,OAAOC,YAAY,eAAef,MAAOH,KAAKN,MAAMS,MAAOgB,SAAUnB,KAAKJ,oB,GAxCvEwB,IAAMC,WCoBhBC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,QAAO,0BAAMA,UAAU,OAAhB,OAArB,SAEF,yBAAKA,UAAU,QACf,gJACA,mFACE,kBAAC,EAAD,MACA,2BACE,uBAAGC,KAAK,2CAAR,UADF,MACiE,uBAAGA,KAAK,0BAAR,iBCJrDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.01329cc0.chunk.js","sourcesContent":["import React from 'react';\nconst axios = require('axios');\n\nclass NumberForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    // Prevents the event from following its default action which in this case is reloading the page\n    // alert(`Number: ${this.state.input} was submitted`);\n    if(this.state.input.length > 10 || this.state.input.length < 10) {\n      alert(\"Enter a valid number without any other digits\");\n      event.preventDefault();\n      return;\n    }\n    let num = \"+1\" + this.state.input;\n    axios.post('http://40.87.61.103:1289/addnumber', {\n      number: num\n    })\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n          <input type='text' placeholder='Phone Number' value={this.state.value} onChange={this.handleChange} />\n      </form>\n    );\n  }\n}\n\nexport default NumberForm;","import React from 'react';\nimport './App.css';\nimport './numberForm.js'\nimport NumberForm from './numberForm.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1 className=\"name\"><span className=\"fun\">FUN</span>TEXT</h1>\n      </div>\n      <div className=\"body\">\n      <p>Funtext is a webapp that sends subscribers anime scenes related to the day, enter your number below to subscribe.</p>\n      <p>Add a valid 10 digit number with no spaces or dashes</p>\n        <NumberForm></NumberForm>\n        <p>\n          <a href=\"https://github.com/shiven-nayee/Funtext\">Github</a> | <a href=\"http://shivennayee.com\">Developer</a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}