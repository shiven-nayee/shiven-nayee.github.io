{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cursor","show","blink","element","hideWhenDone","hideWhenDoneDelay","App","className","avgTypingDelay","stdTypingDelay","onTypingDone","console","log","document","querySelector","style","display","Delay","ms","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAIMA,EAAS,CACbC,MAAM,EACNC,OAAO,EACPC,QAAS,IACTC,cAAc,EACdC,kBAAmB,KAyENC,MAtEf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAClB,kBAAC,IAAD,CACAA,UAAU,UACVC,eAAgB,GAChBC,eAAgB,EAChBT,OAAQA,EACRU,aAAc,WACZC,QAAQC,IAAI,QACZC,SAASC,cAAc,aAAaC,MAAMC,QAAU,UACpDH,SAASC,cAAc,WAAWC,MAAMC,QAAU,YARpD,qBAUsB,0BAAMT,UAAU,QAAhB,gBAVtB,oHAYI,kBAAC,IAAOU,MAAR,CAAcC,GAAI,MAClB,6BACA,6BAdJ,0FAgBI,kBAAC,IAAOD,MAAR,CAAcC,GAAI,MAClB,6BAjBJ,+CAoBA,yBAAKX,UAAU,YACb,yBAAKA,UAAU,WACb,uCACA,qYAIA,2BAAG,uBAAGY,KAAK,qBAAqBC,OAAO,SAASC,IAAI,uBAAjD,UAAH,MAAuF,uBAAGF,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAA7D,aAEzF,yBAAKd,UAAU,WACb,+CACA,kPAIA,2BAAG,uBAAGY,KAAK,kDAAkDC,OAAO,SAASC,IAAI,uBAA9E,YAEL,yBAAKd,UAAU,WACb,+CACA,kZAGA,2BAAG,uBAAGY,KAAK,qBAAqBC,OAAO,SAASC,IAAI,uBAAjD,YAEL,yBAAKd,UAAU,WACb,6DACA,6ZAGA,2BAAG,uBAAGY,KAAK,gEAAgEC,OAAO,SAASC,IAAI,uBAA5F,YAEL,yBAAKd,UAAU,WACb,2DACA,+iBAGA,2BAAG,uBAAGY,KAAK,8DAAR,aAGP,yBAAKZ,UAAU,UACb,2BAAG,uBAAGY,KAAK,gEAAgEC,OAAO,SAASC,IAAI,uBAA5F,UAAH,MAAkI,uBAAGF,KAAK,iCAAR,0BAAlI,0CChEYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d71c144d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Typist from 'react-typist';\n\nconst cursor = {\n  show: true,\n  blink: true,\n  element: '|',\n  hideWhenDone: true,\n  hideWhenDoneDelay: 1000,\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <Typist \n      className=\"textbox\" \n      avgTypingDelay={50} \n      stdTypingDelay={0} \n      cursor={cursor} \n      onTypingDone={()=> {\n        console.log('done')\n        document.querySelector(\".projects\").style.display = \"inherit\";\n        document.querySelector(\".footer\").style.display = \"inherit\";\n      }}>\n          Hello. My name is <span className=\"name\">Shiven Nayee</span>. I am CS student looking to join a hardworking team dedicated to \n          developing functional solutions for businesses.\n          <Typist.Delay ms={1000} />\n          <br/>\n          <br/>\n          I have worked with various software and languages, but i'm best at Javascript and Java. \n          <Typist.Delay ms={1000} />\n          <br/>\n          Here's some of the projects i've worked on.\n      </Typist>\n      <div className=\"projects\">\n        <div className=\"project\">\n          <h3>Funtext</h3>\n          <p>\n            Funtext is an application I made that sends subscribers anime scenes related to the day.\n            Every morning at 9AM the user will receive a scene from some anime saying the current day and month. I built this RESTful api using Node.js, express, psql and hosted it on an Azure webserver. I built an image database using python to scrape the web for relevant images.\n          </p>\n          <p><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> | <a href=\"http://shivennayee.com/funtext\" target=\"_blank\" rel=\"noopener noreferrer\">Webpage</a></p>\n        </div>\n        <div className=\"project\">\n          <h3>Data Structures</h3>\n          <p>\n            This is a repository of the work I've done for my Computer Science course data structures.\n            I implemented the various data structures that we learned in class such as Linked Lists, Binary Search trees and Stacks.\n          </p>\n          <p><a href=\"https://github.com/shiven-nayee/Data-Structures\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n        </div>\n        <div className=\"project\">\n          <h3>Listing Scraper</h3>\n          <p>\n            This is a project I worked on as part of the Tech Scholars Honors program at LaGuardia Community College. My team and I were tasked with analyzing data pertaining to requirements for Software Engineering jobs in NYC. We wrote the scraper and in C++ and our program reads a CSV file, counts the frequency of recurring terms and organzines the terms in most relevant order.\n          </p>\n          <p><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n        </div>\n        <div className=\"project\">\n          <h3>Huffman Compression Algorithm</h3>\n          <p>\n            For my final project as a part of the Data Structures course I chose to work with the huffman coding algorithm which is a data compression algorithm. This was a valuable learning expreience as this algorithm is the basic idea behind file compression. The algorithm I wrote compresses strings into much smaller \"Huffman Trees\" and it is also decodable back into its original strings.\n          </p>\n          <p><a href=\"https://github.com/shiven-nayee/Huffman-Compression-Algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></p>\n        </div>\n        <div className=\"project\">\n          <h3>Genetic Algorithm Selection</h3>\n          <p>\n            In my Discrete Structures and Algorithms course I was tasked with solving the Knapsack problem by using the genetic algorithm. The knapsack problem states that there is a knapsack that can hold a certain amount of weight and each item that goes in the knapsack has a certain value and weight. The goal is to get the greatest value while insuring that the weight doesnâ€™t exceed the carrying capacity of the knapsack. A genetic algorithm is one that imitates how genes change and grow overtime as a byproduct of reproduction.\n          </p>\n          <p><a href=\"https://github.com/shiven-nayee/Knapsack-Genetic-Algorithm\">Github</a></p>\n        </div>\n      </div>\n      <div className=\"footer\">\n        <p><a href=\"https://github.com/shiven-nayee/Huffman-Compression-Algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> | <a href=\"mailto:shiven.nayee@gmail.com\">Shiven.nayee@gmail.com</a> | Thanks for visting! ðŸ‘‹</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}